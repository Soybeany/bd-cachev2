@startuml
'https://plantuml.com/sequence-diagram

title 并发获取数据

participant 用户1
participant 工作线程1
participant 锁
participant 工作线程2
participant 用户2

autonumber

用户1 -> 工作线程1 ++: request
用户2 -> 工作线程2 ++: request

工作线程1 -> 锁 ++: lock
工作线程2 -> 锁 ++: wait lock

ref over 工作线程1 : 数据获取逻辑

return get lock
return unlock

工作线程1 --> 用户1 --: response
工作线程2 -> 锁 ++: lock

ref over 工作线程2 : 数据获取逻辑

return unlock

工作线程2 --> 用户2 --: response
@enduml

@startuml
title 数据获取逻辑

start
repeat
    if (有下一级缓存?) is (否) then
        if (有数据源?) is (有) then
            :访问数据源;
            :写入缓存;
            #lightgreen:(C)
            break
        else (无)
            :抛出NoDatasource;
            end
        endif
    else (是)
        :切换到下一级缓存;
        if(获取锁) is(成功) then
            :读取缓存;
             #lightpink:(B)
        else (失败)
            :抛出CacheWaitException(超时/中断);
            end
        endif
    endif
repeat while (捕获到NoCacheException?) is (是) not (否)
:返回数据;
stop
@enduml

@startuml
title 数据获取逻辑
autonumber

工作线程-> 缓存管理器 ++: 获取数据

缓存管理器 -> 缓存管理器 ++: lock 1
缓存管理器-> 一级缓存 ++: 获取缓存
return

opt (没有缓存)
    缓存管理器 -> 缓存管理器 ++: lock 2
    缓存管理器-> 二级缓存 ++: 获取数据
    return
    opt (没有缓存)
        缓存管理器-> 数据源 ++: 获取数据
        return
        缓存管理器 -> 二级缓存 ++: 写入数据
        return
    end
    return unlock 2
    缓存管理器 -> 一级缓存 ++: 写入数据
    return
end

return unlock 1
return
@enduml